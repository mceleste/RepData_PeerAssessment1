sampl <- vector()
for(i in 1:1000)
sampl <- c(sampl, mean(sample(NORMAL, 300, replace=T)))
mean(sampl)
sd(sampl)
hist(sampl, xlim = c(-2, 2), main = " n = 300 " )
par(mfrow= c(3,1)) #Ask for three columns and one row in the graph
sampl <- vector() #Create an empty vector
for(i in 1:1000) #Start a loop with 1000 rounds
sampl <- c(sampl, mean(sample(UNIFORM, 3, replace=T)))
#fill sampl with sampl, and the mean of three random items from NORMAL
mean(sampl)
sd(sampl)
hist(sampl, xlim = c(-2, 2), main = " n = 3 " )
sampl <- vector()
for(i in 1:1000)
sampl <- c(sampl, mean(sample(UNIFORM, 6, replace=T)))
mean(sampl)
sd(sampl)
hist(sampl, xlim = c(-2, 2), main = " n = 6 " )
sampl <- vector()
for(i in 1:1000)
sampl <- c(sampl, mean(sample(UNIFORM, 300, replace=T)))
mean(sampl)
sd(sampl)
hist(sampl, xlim = c(-2, 2), main = " n = 300 " )
par(mfrow= c(3,1)) #Ask for three columns and one row in the graph
sampl <- vector() #Create an empty vector
for(i in 1:1000) #Start a loop with 1000 rounds
sampl <- c(sampl, mean(sample(SKEWED, 3, replace=T)))
#fill sampl with sampl, and the mean of three random items from NORMAL
mean(sampl)
sd(sampl)
hist(sampl, xlim = c(-2, 2), main = " n = 3 " )
sampl <- vector()
for(i in 1:1000)
sampl <- c(sampl, mean(sample(SKEWED, 6, replace=T)))
mean(sampl)
sd(sampl)
hist(sampl, xlim = c(-2, 2), main = " n = 6 " )
sampl <- vector()
for(i in 1:1000)
sampl <- c(sampl, mean(sample(SKEWED, 300, replace=T)))
mean(sampl)
sd(sampl)
hist(sampl, xlim = c(-2, 2), main = " n = 300 " )
par(mfrow= c(3,1)) #Ask for three columns and one row in the graph
sampl <- vector() #Create an empty vector
for(i in 1:1000) #Start a loop with 1000 rounds
sampl <- c(sampl, mean(sample(NORMAL, 3, replace=T)))
#fill sampl with sampl, and the mean of three random items from NORMAL
mean(sampl)
sd(sampl)
hist(sampl, xlim = c(-2, 2), main = " n = 3 " )
sampl <- vector()
for(i in 1:1000)
sampl <- c(sampl, mean(sample(NORMAL, 6, replace=T)))
mean(sampl)
sd(sampl)
hist(sampl, xlim = c(-2, 2), main = " n = 6 " )
sampl <- vector()
for(i in 1:1000)
sampl <- c(sampl, mean(sample(NORMAL, 300, replace=T)))
mean(sampl)
sd(sampl)
hist(sampl, xlim = c(-2, 2), main = " n = 300 " )
sd(sampl)/sqrt(300)
sd(sampl)*sqrt(300)
x <- rnorm(100000)
y <- rnorm(100000)
z <- rep(NA, 100000) #z is created empty but with a given size.
system.time({
for (i in 1:100000) {
z[i] <- x[i] + y[i]
}
})
system.time( k <- x + y )
set.seed(897)
ME <- matrix(rnorm(24000),nrow=1000)
colnames(ME) <- c(paste("A",1:12,sep=""),paste("B",1:12,sep=""))
length(which(ME<=0))
keep <- (apply(ME[,1:12],1,mean) > 0) & (apply(ME[,13:24],1,mean) > 0)
length(keep)
sum(keep) #make sure you understand sum() applied to logicals
head(keep)
tail(keep)
trimmed <- apply(ME,1,function(ME){mean(ME, trim=0.05)})
str(ME)
str(trimmed)
summary(ME)
?apply
?mean
?t.test
t.test(ME)
P <- t.test(ME[1:12], var.equal=T)
P
P2 <- t.test(ME[13:24], var.equal=T)
P2
P2$p.value
P <- apply(ME,1,t.test,var.equal)
P <- apply(ME,1,t.test,var.equal, T)
?apply
P <- apply(ME,1,t.test,var.equal=T)
P
P[P$p.value < 0.05]
which(P$p.value < 0.05)
P$p.value < 0.05
summary(P$p.value)
str(P)
P$p.value
P$p.value[]
str(P)
P <- t.test(ME[1:12], var.equal=T)
str(P)
P$p.value
P <- t.test(ME[,p.value], var.equal=T)
P <- t.test(ME[p.value,], var.equal=T)
P <- t.test(ME[1:24,], var.equal=T)
str(P)
P$p.value
P <- apply(ME,1,t.test,var.equal=T)
P$p.value
P[1,1]
P[1]
P[2]
P <- aapply(ME,1,t.test,var.equal=T)
P <- sapply(ME,1,t.test,var.equal=T)
P <- apply(ME,2,t.test,var.equal=T)
P
str(P)
P[[p.value]]
P[[1]]
P[[2]]
P[[2,p.vaue]]
P[[2,p.value]]
P$p.value
P[[p.value]]
P$A1[p.value]
P$A1[1]
P$A1[2]
P$A1[3]
P[[3]]
P[3]
P <- apply(ME,3,t.test,var.equal=T)
P <- apply(ME,2,t.test,var.equal=T)
P[][3]
P[][4]
P[][4,3]
P[4][3]
P[][3,1]
P[3,1]
P[3[1]
]
P[3[3]]
P[[]]
P[][]
P[][3]
P[][3][3]
P[][3][2
]
P[][3][1]
P[][3][2]
P[][3][p.value]
P[][3][4]
P[][1][4]
P[][1][1]
P[][1]
P[][1]$p.value
P[]$p.value
P$p.value
P2 <- P[][]
P2
str(P2)
P2$B12$p.value
P[]$p.value
P[[p.value]]
P[p.value]
P <- P2[[]][[]]
P$A1$p.value
P$A2$p.value
P[1]$p.value
P[2,3]$p.value
P[2,3]
P[,3]
P[3]
P[3][3]
P[3][1]
P[3][1]$p.value
P[3][3]$p.value
P[3][]$p.value
P[3][1]
P[3][1][3]
P[3][1][1]
str(P[3][1])
A3 <- P[3][1]
A3
A3[2]
A3 <- P[3][1][]
A3[2]
str(A3)
A3$p.value
A3[]$p.value
A3[1,3]
A31
A3[2]
str(ME)
P <- apply(ME[,1:24],2,t.test,var.equal=T)
P
P$p.value
P[]$p.value
P$A1$p.value
P$A3$p.value
P$A2$p.value
P$A4$p.value
P$A5$p.value
P$A6$p.value
P$A6$p.value
P$A7$p.value
P$A8$p.value
P$A9$p.value
P$A10$p.value
P$A11$p.value
P$A12$p.value
P$B12$p.value
P$B11$p.value
P$B10$p.value
P$B9$p.value
P$B8$p.value
P$B7$p.value
P$B6$p.value
P$B5$p.value
P$B5$p.value[2]
P$B4$p.value
P$B3$p.value
P$B2$p.value
P$B1$p.value
P <- apply(ME,1,t.test,var.equal=T)
P
P[[]]$p.value
P[[4]]
P[[4,1]]
P[[1,4]]
P[][4]
P[][4][4]
P[][4][3]
P[][4][2]
P[][4][1]
P[][][1]
str(P)
summary(P)
P$htest
P[,4]
P[][4]
P[]$htest
P[]$htest$p.value
?t.test
P <- apply(ME,1,t.test,var.equal=T,data=P2)
P2
str(P2)
P2$p.value
P2$htest$p.value
P2[]$p.value
?class
class(P)
class(P2)
class(P2$A1)
P2$A1$p.value
P2$A1[2]$p.value
P2$A1[3]$p.value
P2$A1[4]$p.value
P2$B12[3]$p.value
P <- apply(ME,1,t.test,var.equal=T,data=P2)
str(P2)
str(P)
P[[]]
P[
]
P[]$p.value
P[][]$p.value
P[[1000]]
P[[1000]]$p.value
P[[]]$p.value
P[[1:1000]]$p.value
P[[1000]]$p.value
P[[999:1000]]$p.value
P[[1:10]]$p.value
P[[1:10]]
P[[1:10]][3]
P[[10]][3]
for (i in 1:1000) {}
if (P[[i]][3] > 0.05) print(P[[i]][3])
for (i in 1:1000) {
if (P[[i]][3] > 0.05) print(P[[i]][3])
}
for (i in 1:1000) {
if (P[[i]][3] <= 0.05) print(P[[i]][3])
}
for (i in 1:1000) {
if (P[[i]][3] <= 0.05) j = j + 1
print j }
j <- 0
for (i in 1:1000) {
if (P[[i]][3] <= 0.05) j = j + 1
print j }
j = 0
for (i in 1:1000) {
if (P[[i]][3] <= 0.05) { j = j + 1 }
print j }
for (i in 1:1000) {
if (P[[i]][3] < 0.051) { j = j + 1 }
j }
for (i in 1:1000) {
if (P[[i]][3] < 0.05) { j = j + 1 }
print j }
for (i in 1:1000) {
if (P[[i]][3] <= 0.05) { j = j + 1 }
print (j) }
results.var.equal <- apply(ME, 1, function(ME)(t.test(x=ME[1:12], y=ME[13:24], var.equal=T)$p.value))
sum(results.var.equal<=0.05)
?quinf
?qinf
?qunif
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
sum(temp)^2
sum(temp)
sum(temp^2) - sum(temp)^2
sum(temp[,1]*temp[,2]^2) - sum(temp[,1]*temp[,2])^2
temp[,1]
temp[1,]
sum(temp[1,]*temp[2,]^2) - sum(temp[1,]*temp[2,])^2
sum(temp[1,]*temp[2,])^2
sum((temp[1,]*temp[2,])^2) - sum(temp[1,]*temp[2,])^2
sum(temp[1,]*temp[2,])^2
sum(temp[1,]*temp[2,])
(0.52*0.7)/(o.52*.7 + 0.25*.3)
(0.52*0.7)/(0.52*.7 + 0.25*.3)
(0.48*.30)/(.48*.30+.75*.70)
(0.52*.30)/(.52*.30+.75*.70)
(0.52*.70)/(.52*.70+.75*.30)
source('~/DataAnalysis/compare.hypothesis.tests.R')
set.seed(570); compare.hypothesis.tests(13,90,100,10)
set.seed(570); compare.hypothesis.tests(13,90,100,10)
groupA <-c(6.29, 6.86, 6.06, 6.64, 6.70, 7.26)
groupB <-c(6.30, 5.83, 6.50, 5.75, 6.24, 5.38)
t.test(groupA, groupB, var.equal=T)
t.test(groupA, groupB, paired=T)
set.seed(570); compare.hypothesis.tests(13,90,100,10)
set.seed(896);
run<- data.frame(time=rnorm(50,mean=50,sd=10),training.method=rep(letters[1:5],each=10));
summary(aov(run$time~run$training.method))
letters[1:5]
run[1:10,1] <- run[1:10,1] - 15
summary(aov(run$time~run$training.method))
kruskal.test(run$time~run$training.method)
summary(aov(run$time~run$training.method))
count <- 0
variances <- NULL
for (i in 1:5){
count <- count + 1
variances <- c(variances, var(run$time[run$training.method==letters[count]]))
}
variances
sum(variances)/5
count <- 0
means <- NULL
for (i in 1:5){
count <- count + 1
means <- c(means, mean(run$time[run$training.method==letters[count]]))
}
means
var(means) * 10
t.test(groupA, groupB, paired=T)
set.seed(570); compare.hypothesis.tests(13,90,100,10)
t.test(groupA, groupB, var.equal=T)
t.test(groupA, groupB, var.equal=T, alternative="less")
wilcox.test(groupA, groupB)
groupA <-c(6.29, 6.86, 6.06, 6.64, 6.70, 7.26)
Activity <- c( 1, 4, 2, 3, 6, 5)
cor(groupA, Activity)
cor(Activity, groupA)
#Create some data
set.seed(278)
x <- rnorm(25, mean=100, sd=10)
y <- 2 * x + 20 + rnorm(25, mean=10, sd=4)
cor(x,y)  #If you just want the correlation coefficient
cor(x,y)^2 #Or the coefficient of determination
cor(x,y, method="spearman")
cor(groupA,Activity, method="spearman")
groupA <-c(6.29, 6.86, 6.06, 6.64, 6.70, 7.26)
groupB <-c(6.30, 5.83, 6.50, 5.75, 6.24, 5.38)
groupC <-c(6.65, 6.10, 5.96, 5.37, 5.74, 5.59)
groupA <-c(6.29, 6.86, 6.06, 6.64, 6.70, 7.26)
groupB <-c(6.30, 5.83, 6.50, 5.75, 6.24, 5.38)
groupC <-c(6.65, 6.10, 5.96, 5.37, 5.74, 5.59)
str(run)
?aov
aov(groupA~groupB)
kruskal.test(groupA~groupB)
kruskal.test(groupA~groupC)
kruskal.test(groupA~groupC~groupB)
kruskal.test(groupB~groupC)
summary(aov(groupA~groupB))
summary(aov(groupA~groupB~groupC))
summary(aov(groupB~groupC))
groupAll <- data.frame(level=groupA, group="A")
str(groupAll)
rbind(groupAll, groupB, "B")
str(groupAll)
?rbind
rbind(level=groupB, group="B")
rbind(groupAll, level=groupB, group="B")
?rbind
str(groupAll)
rbind(groupAll, groupB, "B")
str(groupAll)
rbind(groupAll, groupAll$level = groupB, groupAll$group = "B")
rbind(groupAll, groupB)
str(groupAll)
str(groupB)
groupB$group = "B"
str(groupB)
names(groupB)
names(groupB) <- groupB$level
names(groupB)
groupB
groupA <-c(6.29, 6.86, 6.06, 6.64, 6.70, 7.26)
groupB <-c(6.30, 5.83, 6.50, 5.75, 6.24, 5.38)
groupC <-c(6.65, 6.10, 5.96, 5.37, 5.74, 5.59)
groupB <- as.dataframe(groubB, level=groupB, group="B")
groupB <- dataframe(groubB, level=groupB, group="B")
groupB <- data.frame(groubB, level=groupB, group="B")
groupB <- data.frame(groupB, level=groupB, group="B")
str(groupB)
groupC <- data.frame(groupC, level=groupC, group="C")
rbind(groupAll, groupB)
str(groupB)
groupB$groupB = null
groupB$groupB = NULL
rbind(groupAll, groupB)
str(groupC)
groupC$groupC = NULL
rbind(groupAll, groupC)
groupAll <- rbind(groupAll, groupB)
groupAll <- rbind(groupAll, groupC)
groupA
groupAll
summary(aov(groupAll$level~groupAll~group))
summary(aov(groupAll$level~groupAll$group))
kruskal.test(groupAll$level~groupAll$group)
groupA <-c(6.29, 6.86, 6.06, 6.64, 6.70, 7.26)
groupB <-c(6.30, 5.83, 6.50, 5.75, 6.24, 5.38)
t.test(groupA, groupB, var.equal=T)
t.test(groupA, groupB, paired=T)
?t.test
?qqplot
measurements <- rnorm(40)^2
qqplot(measurements)
set.seed(570)
group1 <- rnorm(13,90, 10)
group2 <- rnorm(13,100,10)
#So let’s pool the values in one group for a while
group <- c(group1,group2)
dif <- numeric(10000)
for(i in 1:10000){
dif[i]<-mean(sample(group,13,replace=T))-mean(sample(group,13,replace=T))
}
hist(dif)
x <- rnorm(40)
y <- measurements
qqplot(x,y)
x<-rnorm(40);qqplot(x,measurements)
x<-rnorm(40);qqplot(x,measurements)
x<-norm(40)^2;qqplot(x,measurements)
x<-norm(40)^2;qqplot(x,measurements)
x<-rnorm(40)^2;qqplot(x,measurements)
qqnorm(measurements);qqline(measurements)
qqnorm(measurements);qqline(measurements)
?qqnorm
set.seed(12)
team <- c(rep("A",10),rep("B",10))
time <- c(rnorm(10, mean=40, sd= 10),rnorm(10, mean=40, sd= 10))
place <- rank(time)
results <- data.frame(place, time, team)
plot(time, place, pch=team)
set.seed(12)
team <- c(rep("A",34),rep("B",10))
time <- c(rnorm(10, mean=40, sd= 10),rnorm(10, mean=40, sd= 10))
place <- rank(time)
results <- data.frame(place, time, team)
plot(time, place, pch=team)
set.seed(12)
team <- c(rep("A",10),rep("B",10))
time <- c(rnorm(10, mean=34, sd= 10),rnorm(10, mean=40, sd= 10))
place <- rank(time)
results <- data.frame(place, time, team)
plot(time, place, pch=team)
str(team)
wilcox.test(results$time[results$team="A"], results$time[results$team="B"])
wilcox.test(results$time[results$team="A"], results$time[results$team="B"])
wilcox.test(results$time[results$team=="A"], results$time[results$team=="B"])
setwd("~/GitHub")
setwd("~/GitHub/RepData_PeerAssessment1")
data <- read.csv("activity.csv")
'''{r echo=TRUE}
'''
---
data <- read.csv("activity.csv")
source('~/.active-rstudio-document', echo=TRUE)
