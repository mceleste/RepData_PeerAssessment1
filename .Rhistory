}
for (i in 1:1000) {
if (P[[i]][3] <= 0.05) print(P[[i]][3])
}
for (i in 1:1000) {
if (P[[i]][3] <= 0.05) j = j + 1
print j }
j <- 0
for (i in 1:1000) {
if (P[[i]][3] <= 0.05) j = j + 1
print j }
j = 0
for (i in 1:1000) {
if (P[[i]][3] <= 0.05) { j = j + 1 }
print j }
for (i in 1:1000) {
if (P[[i]][3] < 0.051) { j = j + 1 }
j }
for (i in 1:1000) {
if (P[[i]][3] < 0.05) { j = j + 1 }
print j }
for (i in 1:1000) {
if (P[[i]][3] <= 0.05) { j = j + 1 }
print (j) }
results.var.equal <- apply(ME, 1, function(ME)(t.test(x=ME[1:12], y=ME[13:24], var.equal=T)$p.value))
sum(results.var.equal<=0.05)
?quinf
?qinf
?qunif
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
sum(temp)^2
sum(temp)
sum(temp^2) - sum(temp)^2
sum(temp[,1]*temp[,2]^2) - sum(temp[,1]*temp[,2])^2
temp[,1]
temp[1,]
sum(temp[1,]*temp[2,]^2) - sum(temp[1,]*temp[2,])^2
sum(temp[1,]*temp[2,])^2
sum((temp[1,]*temp[2,])^2) - sum(temp[1,]*temp[2,])^2
sum(temp[1,]*temp[2,])^2
sum(temp[1,]*temp[2,])
(0.52*0.7)/(o.52*.7 + 0.25*.3)
(0.52*0.7)/(0.52*.7 + 0.25*.3)
(0.48*.30)/(.48*.30+.75*.70)
(0.52*.30)/(.52*.30+.75*.70)
(0.52*.70)/(.52*.70+.75*.30)
source('~/DataAnalysis/compare.hypothesis.tests.R')
set.seed(570); compare.hypothesis.tests(13,90,100,10)
set.seed(570); compare.hypothesis.tests(13,90,100,10)
groupA <-c(6.29, 6.86, 6.06, 6.64, 6.70, 7.26)
groupB <-c(6.30, 5.83, 6.50, 5.75, 6.24, 5.38)
t.test(groupA, groupB, var.equal=T)
t.test(groupA, groupB, paired=T)
set.seed(570); compare.hypothesis.tests(13,90,100,10)
set.seed(896);
run<- data.frame(time=rnorm(50,mean=50,sd=10),training.method=rep(letters[1:5],each=10));
summary(aov(run$time~run$training.method))
letters[1:5]
run[1:10,1] <- run[1:10,1] - 15
summary(aov(run$time~run$training.method))
kruskal.test(run$time~run$training.method)
summary(aov(run$time~run$training.method))
count <- 0
variances <- NULL
for (i in 1:5){
count <- count + 1
variances <- c(variances, var(run$time[run$training.method==letters[count]]))
}
variances
sum(variances)/5
count <- 0
means <- NULL
for (i in 1:5){
count <- count + 1
means <- c(means, mean(run$time[run$training.method==letters[count]]))
}
means
var(means) * 10
t.test(groupA, groupB, paired=T)
set.seed(570); compare.hypothesis.tests(13,90,100,10)
t.test(groupA, groupB, var.equal=T)
t.test(groupA, groupB, var.equal=T, alternative="less")
wilcox.test(groupA, groupB)
groupA <-c(6.29, 6.86, 6.06, 6.64, 6.70, 7.26)
Activity <- c( 1, 4, 2, 3, 6, 5)
cor(groupA, Activity)
cor(Activity, groupA)
#Create some data
set.seed(278)
x <- rnorm(25, mean=100, sd=10)
y <- 2 * x + 20 + rnorm(25, mean=10, sd=4)
cor(x,y)  #If you just want the correlation coefficient
cor(x,y)^2 #Or the coefficient of determination
cor(x,y, method="spearman")
cor(groupA,Activity, method="spearman")
groupA <-c(6.29, 6.86, 6.06, 6.64, 6.70, 7.26)
groupB <-c(6.30, 5.83, 6.50, 5.75, 6.24, 5.38)
groupC <-c(6.65, 6.10, 5.96, 5.37, 5.74, 5.59)
groupA <-c(6.29, 6.86, 6.06, 6.64, 6.70, 7.26)
groupB <-c(6.30, 5.83, 6.50, 5.75, 6.24, 5.38)
groupC <-c(6.65, 6.10, 5.96, 5.37, 5.74, 5.59)
str(run)
?aov
aov(groupA~groupB)
kruskal.test(groupA~groupB)
kruskal.test(groupA~groupC)
kruskal.test(groupA~groupC~groupB)
kruskal.test(groupB~groupC)
summary(aov(groupA~groupB))
summary(aov(groupA~groupB~groupC))
summary(aov(groupB~groupC))
groupAll <- data.frame(level=groupA, group="A")
str(groupAll)
rbind(groupAll, groupB, "B")
str(groupAll)
?rbind
rbind(level=groupB, group="B")
rbind(groupAll, level=groupB, group="B")
?rbind
str(groupAll)
rbind(groupAll, groupB, "B")
str(groupAll)
rbind(groupAll, groupAll$level = groupB, groupAll$group = "B")
rbind(groupAll, groupB)
str(groupAll)
str(groupB)
groupB$group = "B"
str(groupB)
names(groupB)
names(groupB) <- groupB$level
names(groupB)
groupB
groupA <-c(6.29, 6.86, 6.06, 6.64, 6.70, 7.26)
groupB <-c(6.30, 5.83, 6.50, 5.75, 6.24, 5.38)
groupC <-c(6.65, 6.10, 5.96, 5.37, 5.74, 5.59)
groupB <- as.dataframe(groubB, level=groupB, group="B")
groupB <- dataframe(groubB, level=groupB, group="B")
groupB <- data.frame(groubB, level=groupB, group="B")
groupB <- data.frame(groupB, level=groupB, group="B")
str(groupB)
groupC <- data.frame(groupC, level=groupC, group="C")
rbind(groupAll, groupB)
str(groupB)
groupB$groupB = null
groupB$groupB = NULL
rbind(groupAll, groupB)
str(groupC)
groupC$groupC = NULL
rbind(groupAll, groupC)
groupAll <- rbind(groupAll, groupB)
groupAll <- rbind(groupAll, groupC)
groupA
groupAll
summary(aov(groupAll$level~groupAll~group))
summary(aov(groupAll$level~groupAll$group))
kruskal.test(groupAll$level~groupAll$group)
groupA <-c(6.29, 6.86, 6.06, 6.64, 6.70, 7.26)
groupB <-c(6.30, 5.83, 6.50, 5.75, 6.24, 5.38)
t.test(groupA, groupB, var.equal=T)
t.test(groupA, groupB, paired=T)
?t.test
?qqplot
measurements <- rnorm(40)^2
qqplot(measurements)
set.seed(570)
group1 <- rnorm(13,90, 10)
group2 <- rnorm(13,100,10)
#So letâ€™s pool the values in one group for a while
group <- c(group1,group2)
dif <- numeric(10000)
for(i in 1:10000){
dif[i]<-mean(sample(group,13,replace=T))-mean(sample(group,13,replace=T))
}
hist(dif)
x <- rnorm(40)
y <- measurements
qqplot(x,y)
x<-rnorm(40);qqplot(x,measurements)
x<-rnorm(40);qqplot(x,measurements)
x<-norm(40)^2;qqplot(x,measurements)
x<-norm(40)^2;qqplot(x,measurements)
x<-rnorm(40)^2;qqplot(x,measurements)
qqnorm(measurements);qqline(measurements)
qqnorm(measurements);qqline(measurements)
?qqnorm
set.seed(12)
team <- c(rep("A",10),rep("B",10))
time <- c(rnorm(10, mean=40, sd= 10),rnorm(10, mean=40, sd= 10))
place <- rank(time)
results <- data.frame(place, time, team)
plot(time, place, pch=team)
set.seed(12)
team <- c(rep("A",34),rep("B",10))
time <- c(rnorm(10, mean=40, sd= 10),rnorm(10, mean=40, sd= 10))
place <- rank(time)
results <- data.frame(place, time, team)
plot(time, place, pch=team)
set.seed(12)
team <- c(rep("A",10),rep("B",10))
time <- c(rnorm(10, mean=34, sd= 10),rnorm(10, mean=40, sd= 10))
place <- rank(time)
results <- data.frame(place, time, team)
plot(time, place, pch=team)
str(team)
wilcox.test(results$time[results$team="A"], results$time[results$team="B"])
wilcox.test(results$time[results$team="A"], results$time[results$team="B"])
wilcox.test(results$time[results$team=="A"], results$time[results$team=="B"])
setwd("~/GitHub/RepData_PeerAssessment1")
data <- read.csv("activity.csv")
str(data)
summary(data$date)
tapply(data$date, mean, na.rm=TRUE)
?apply
sapply
?sapply
sapply(data$date, mean, na.rm=TRUE)
?aggregate
days <- aggregate(data, data$date, mean, nam.rm=TRUE)
days <- aggregate(data, as.list(data$date), mean, nam.rm=TRUE)
days <- unique(data$date)
days
data2 <- aggregate(data, as.list(days), mean, na.rm=TRUE)
data2 <- aggregate(data$steps, as.list(days), mean, na.rm=TRUE)
?apply
apply(data, 1, mean)
apply(data, 1, mean, na.rm=TRUE)
?lapply
data2 <- apply(data, 1, mean, na.rm=TRUE)
summary(data2)
mean(data$steps[data$date=="2012-10-01"], na.rm=TRUE)
mean(data$steps[10], na.rm=TRUE)
mean(data$steps[10])
mean(data$steps[10:100])
mean(data$steps[10:100], na.rm=TRUE)
data$steps[10:20]
data$steps[20:30]
data$steps[20:800]
mean(data$steps[500:700], na.rm=TRUE)
data2 <- data[is.na(data$steps) != TRUE,]
data3 <- apply(data2, 1, mean, na.rm=TRUE)
warnings()
data3 <- sapply(data2, 1, mean, na.rm=TRUE)
data3 <- sapply(data2$steps, mean, na.rm=TRUE)
str(data3)
?aggregate
aggregate(steps, date, mean, data=data2)
str(data2)
aggregate(data$steps, data$date, mean)
aggregate(data$steps, as.list(data$date), mean)
mean(data$steps[10:100])
mean(data$steps[10:100], na.rm=TRUE)
aggregate(data2$steps, as.list(data2$date), mean)
aggregate(data2$steps, list(date=data2$date), mean)
aggregate(avgsteps=data2$steps, list(date=data2$date), mean)
avg <- aggregate(data2$steps, list(steps=steps, date=data2$date), mean)
avg <- aggregate(data2$steps, list(steps=data2$steps, date=data2$date), mean)
str(avg)
avg <- aggregate(x=data2, list(steps=data2$steps,date=data2$date), mean)
warnings()
avg <- aggregate(x=data2$steps, list(steps=data2$steps,date=data2$date), mean)
avg
avg <- aggregate(x=data2$steps, list(date=data2$date), mean)
avg
mean(data$steps[data$date=="2012-11-29"], na.rm=TRUE)
avg <- aggregate(steps=data2$steps, list(date=data2$date), mean)
avg <- aggregate(x=data2$steps, list(date=data2$date), mean)
avg
mean(avg$x)
mean(data2$steps)
mean(data$steps, na.rm=TRUE)
hist(avg)
hist(avg$steps)
str(avg)
hist(avg$x)
?geom_plot
?geom_his
?geom_hist
?geom_histogram
library(ggplot2)
?geom_histogram
?barplot
barplot(avg$steps, avg$date)
barplot(avg$x, avg$date)
summary(avg$date)
summary(avg$steps)
summary(avg$x)
ggplot(avg, aes(x=date, y=steps)) +geom_histogram()
ggplot(avg, aes(x=date, y=x)) +geom_histogram()
ggplot(avg, aes(x=date, y=x)) +geom_histogram(binwidth=1)
ggplot(avg, aes(x=date, y=x)) +geom_histogram(binwidth=100)
ggplot(avg, aes(x=x, y=date)) +geom_histogram(binwidth=100)
plot(avg$x, avg$date)
plot(avg$date, avg$x)
ggplot(avg, aes(x=x[1:10], y=date[1:10])) +geom_histogram()
ggplot(avg, aes(x=x[1:10], y=date)) +geom_histogram()
ggplot(avg[1:10], aes(x=x, y=date)) +geom_histogram()
ggplot(avg[1:10,], aes(x=x, y=date)) +geom_histogram()
ggplot(avg[1:10,], aes(x=date, y=steps)) +geom_histogram()
ggplot(avg[1:10,], aes(x=date, y=x)) +geom_histogram()
ggplot(avg[1:10,], aes(y=x)) +geom_histogram()
ggplot(avg[1:10,], aes(x=x)) +geom_histogram()
summary(avg$date)
ggplot(avg, aes(x=as.character(as.Date(avg, "%m-%d",y=x)) +geom_histogram()
ggplot(avg, aes(x=as.character(as.Date(avg, "%m-%d",y=x)))) +geom_histogram()
as.character(as.Date(avg), "%m-%d")
as.character(as.Date(avg), "%m/%d")
as.character(as.Date(avg$date), "%m/%d")
as.character(as.Date(avg$date), "%m-%d")
ggplot(avg, aes(x=as.character(as.Date(avg$date, "%m/%d",y=x)))) +geom_histogram()
ggplot(avg, aes(x=as.character(as.Date(avg$date, "%m/%d",y=x)))) +geom_histogram(binwidth=0.5)
ggplot(avg, aes(x=as.character(as.Date(avg$date, "%m/%d",y=x)))) +geom_histogram(binwidth=100)
ggplot(avg, aes(x=as.character(as.Date(avg$date, "%m/%d",y=x)))) +geom_histogram(aes(fill=..count..))
ggplot(avg, aes(x=as.character(as.Date(avg$date, "%m/%d",y=x)))) +geom_histogram()
ggplot(avg, aes(x=as.character(as.Date(avg$date), "%m/%d",y=x))) +geom_histogram()
total <- aggregate(data$steps, list(date=data$date), sum)
ggplot(total, aes(x=as.character(as.Date(total$date), "%m/%d",y=x))) +geom_histogram()
plot(total$steps)
plot(total$x)
hist(total$x)
ggplot(total, aes(x=as.character(as.Date(total$date), "%m/%d",y=x))) +geom_histogram()
ggplot(total, aes(x=as.character(as.Date(total$date), "%m/%d",y=x))) +geom_histogram(binwidt=1000)
ggplot(total, aes(x=as.character(as.Date(total$date), "%m/%d",y=x))) +geom_histogram(binwidth=1000)
hist(total$date, breaks="days")
hist(total$x, breaks="days")
hist(total$x, breaks=100)
barplot(total$steps, total$date)
barplot(total$x, total$date)
total$steps <- total$x
avg$steps <- avg$x
?paste
?factor
summary(total$date)
total$days <- factor(total$date, levels=paste("d", seq(1,61)))
summary(total$days)
factor(total$date, levels=paste("d", seq(1,61), sep=""))
total$days <- paste("d", seq(1,61,sep=""))
?paste
total$days
total$days <- paste("d", seq(1,61,sep=" "))
total$days <- paste("d", seq(1,61), sep="")
total$days
head(total)
ggplot(total, aes(x=total$days,y=x)) +geom_histogram()
ggplot(total, aes(x=total$days,y=x/1000)) +geom_histogram()
ggplot(total, aes(x=total$days,y=x)) +geom_histogram(binwidth=10)
ggplot(total[10], aes(x=total$days,y=x)) +geom_histogram(binwidth=10)
ggplot(total[10,], aes(x=total$days,y=x)) +geom_histogram(binwidth=10)
minitotal <- total[1:10,]
ggplot(minitotal, aes(x=total$days,y=x)) +geom_histogram(binwidth=10)
ggplot(minitotal, aes(x=total$days,y=x)) +geom_histogram()
ggplot(minitotal, aes(x=days,y=x)) +geom_histogram()
ggplot(total, aes(x=days,y=x)) +geom_histogram(binwidth=10)
ggplot(tail(total), aes(x=days,y=x)) +geom_histogram(binwidth=10)
ggplot(tail(total), aes(x=days)) +geom_histogram(binwidth=10)
ggplot(tail(total), aes(x=steps)) +geom_histogram(binwidth=10)
ggplot(total, aes(x=steps)) +geom_histogram(binwidth=10)
ggplot(total, aes(x=factor(steps), y=days) +geom_histogram(binwidth=10)
)
ggplot(total, aes(x=factor(steps), y=days)) +geom_histogram(binwidth=10)
ggplot(total, aes(y=factor(steps), x=days)) +geom_histogram(binwidth=10)
str(total)
total$days = factor(total$days)
ggplot(total, aes(y=steps, x=days)) +geom_histogram(binwidth=10)
ggplot(total, aes(y=steps, x=days)) +geom_bar(stat="identity")
ggplot(total, aes(y=steps, x=days)) +geom_bar(stat="identity", binwidth=10)
ggplot(total, aes(y=steps, x=days)) +geom_bar(stat="identity", binwidth=100)
ggplot(total, aes(y=steps, x=days)) +geom_bar(stat="identity", binwidth=1000)
ggplot(total, aes(y=steps, x=days)) +geom_bar(stat="identity", binwidth=10000)
ggplot(total, aes(y=steps, x=days)) +geom_bar(stat="identity", binwidth=1)
ggplot(total, aes(y=steps, x=days)) +geom_bar(stat="identity")
ggplot(total, aes(y=steps, x=date)) +geom_bar(stat="identity")
datebreaks <- total$date
p <- ggplot(total, aes(y=steps, x=date)) +geom_bar(stat="identity")
p <- p + theme(axis.text.x = element_text(angle=90, hjust=1))
p
library(scales)
p <- p + scale_x_date(breaks=datebreaks, labels=date_format(%b %d))
p <- p + scale_x_date(breaks=datebreaks, labels=date_format("%b %d") )
p
p <- ggplot(total, aes(y=steps, x=as.Date(date)) +geom_bar(stat="identity")
p <- ggplot(total, aes(y=steps, x=as.Date(date))) +geom_bar(stat="identity")
p <- p + scale_x_date(breaks=datebreaks, labels=date_format("%b %d") )
p
p <- p + theme(axis.text.x = element_text(angle=90, hjust=1))
datebreaks <- as.Date(total$date)
p <- p + scale_x_date(breaks=datebreaks, labels=date_format("%b %d") )
datebreaks <- as.Date(total$date)
p <- ggplot(total, aes(y=steps, x=as.Date(date))) +geom_bar(stat="identity")
p <- p + theme(axis.text.x = element_text(angle=90, hjust=1))
p <- p + scale_x_date(breaks=datebreaks, labels=date_format("%b %d") )
p
datebreaks <- as.Date(total$date)
p <- ggplot(total, aes(y=steps, x=date)) +geom_bar(stat="identity")
p <- p + theme(axis.text.x = element_text(angle=90, hjust=1))
p <- p + scale_x_date(breaks=datebreaks, labels=date_format("%b %d") )
p
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
p
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
p
summary(data$interval)
head(data)
head(data, 10)
head(data, 100)
24/60/5
(24*60)/5
data[288:289,]
avginterval <- aggregate(steps~interval, data=data, mean, na.rm=TRUE)
maxinterval <- avginterval$interval[avginterval$steps==max(avginterval$steps)]
qplot(interval, steps, data=newdata, geom="line")
avginterval <- aggregate(steps~interval, data=data, mean, na.rm=TRUE)
maxinterval <- avginterval$interval[avginterval$steps==max(avginterval$steps)]
qplot(interval, steps, data=avginterval, geom="line")
str(avginterval)
tail(avginterval)
?repeat
?rep
data$intervalbin <- rep(paste("i", seq(1,288), sep =""))
tail(data$intervalbin)
tail(data)
head(data)
table(data$intervalbin)
avginterval <- aggregate(x=data$steps, list(y=data$intervalbin), mean, na.rm=TRUE)
head(avginterval)
data$intervalbin <- rep(seq(1,288))
avginterval <- aggregate(x=data$steps, list(y=data$intervalbin), mean, na.rm=TRUE)
head(avginterval)
head(avginterval, 10)
plot(avginterval$y, avginterval$x, type="l")
avginterval$y[which.max(avginterval$x)]
plot(avginterval$y, avginterval$x, type="l", xlab="Interval #", ylab="Avg. Steps")
max(data$date) - min(data$date)
max(as.Date(data$date) - min(as.Date(data$date)
)
)
max(as.Date(data$date)) - min(as.Date(data$date))
min(data$date)
min(as.Date(data$date))
max(as.Date(data$date))
table(data$intervalbin[where(is.na(data$steps))])
table(data$intervalbin[is.na(data$steps)])
data[is.na(data$steps),]
head(data[is.na(data$steps),])
tail(data[is.na(data$steps),])
plot(data$intervalbin[is.na(data$steps)])
hist(data$intervalbin[is.na(data$steps)])
table(data$intervalbin[is.na(data$steps)])
table(data$date[is.na(data$steps)])
?count
?nrow
nrow(data$date[is.na(data$steps)==TRUE])
nrow(data$date[is.na(data$steps)])
nrow(data[is.na(data$steps),])
nrow(data[data$steps==NA,])
nrow(data[which(is.na(data$steps),])
nrow(data[which(is.na(data$steps)])
nrow(which(is.na(data$steps))
)
daysNA <- data[is.na(data$steps)==TRUE,]
nrow(daysNA)
nrow(unique(daysNA$date))
unique(daysNA$date)
sum(unique(daysNA$date))
dim(daysNA$date)
nrow(daysNA$date, dim=1)
nrow(daysNA$date, 1)
row(daysNA$date)
row(daysNA)
table(dataNA$date)
table(daysNA$date)
table(daysNA$date, sum)
table(daysNA$date==0, sum)
which(daysNA$steps == 0)
nrow(data[is.na(data$steps)==TRUE,])
table(daysNA$date, > 0)
row(daysNA)
row(unique(daysNA[,2])
)
unique(data$date[is.na(data$steps)])
?index
?rowcount
nrow(unique(daysNA[,2])
)
nrow(array(unique(daysNA[,2]))
)
nrow(array(unique(daysNA[,2])))
nrow(array(unique(data$date[is.na(data$steps)])))
str(avginterval)
newdata <- data
avginterval$x[avginterval$y == newdata$interval[is.na(newdata$steps)==TRUE]]
head(avginterval)
tail(avginterval)
head(newdata[is.na(newdata$steps)==TRUE])
head(newdata[is.na(newdata$steps)==TRUE,])
tail(newdata[is.na(newdata$steps)==TRUE,])
nrow(newdata[is.na(newdata$steps)==TRUE,])
newdata[is.na(newdata$steps)==TRUE,1] <- avginterval$steps
newdata[is.na(newdata$steps)==TRUE,1] <- avginterval$x
summary(newdata$steps)
head(newdata[is.na(newdata$steps)==TRUE,])
head(newdata[is.na(newdata$steps)==TRUE,])
head(newdata)
head(avginterval)
avg.steps
mean(newdata$steps)
median(newdata$steps)
median(data$steps)
median(data$steps, na.rm=TRUE)
